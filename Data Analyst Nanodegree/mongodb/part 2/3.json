
### The aim of this is document is to construct a query for json files.???

定义函数的方式为：自下而上。

```python
import json
import codecs
import requests

URL_MAIN = "http://api.nytimes.com/svc/"
URL_POPULAR = URL_MAIN + "mostpopular/v2/"
#### above so that URL POPULAR = ...

API_KEY = { "popular": "",
            "article": ""} #### why????

def get_from_file(kind, period):
    #### below #### input kind, period, ---->>>> get filename....
    filename = "popular-{0}-{1}.json".format(kind, period)     
    with open(filename, "r") as f:
        return json.loads(f.read())  ######## read all texts


def query_site(url, target, offset):
    # This will set up the query with the API key and offset
    # Web services often use offset paramter to return data in small chunks
    # NYTimes returns 20 articles per request, if you want the next 20
    # You have to provide the offset parameter
    
    ### below ### first check...
    if API_KEY["popular"] == "" or API_KEY["article"] == "":
        print "You need to register for NYTimes Developer account to run this program."
        print "See Intructor notes for information"
        return False
        
    ### below ### set parameters... input 'target'(”popular“ or ”article“), 
    ### so that we get API_KEY[target], which was defined above...
    params = {"api-key": API_KEY[target], "offset": offset}
    
    ### below ###
    r = requests.get(url, params = params)

    if r.status_code == requests.codes.ok:
        return r.json()
    else:
        r.raise_for_status()

def get_popular(url, kind, days, section="all-sections", offset=0):
    # This function will construct the query according to the requirements of the site
    # and return the data, or print an error message if called incorrectly
    
    ### below ### ... two parameters... the true values have a domain..
    if days not in [1,7,30]:
        print "Time period can be 1,7, 30 days only"
        return False
    if kind not in ["viewed", "shared", "emailed"]:
        print "kind can be only one of viewed/shared/emailed"
        return False

    url += "most{0}/{1}/{2}.json".format(kind, section, days)
    data = query_site(url, "popular", offset)   #### the url is followed explicitly by an json file!!!

    return data

